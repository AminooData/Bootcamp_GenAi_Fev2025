# Exercice 1

# Définition des classes
class Pets():
    def __init__(self, animals):
        self.animals = animals

    def walk(self):
        for animal in self.animals:
            print(animal.walk())

class Cat():
    is_lazy = True

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def walk(self):
        return f'{self.name} is just walking around'

class Bengal(Cat):
    def sing(self, sounds):
        return f'{sounds}'

class Chartreux(Cat):
    def sing(self, sounds):
        return f'{sounds}'

#  Nouvelle classe Siamese qui hérite de Cat
class Siamese(Cat):
    def sing(self, sounds):
        return f'{sounds}'

#  Création des instances de chats
cat1 = Bengal("Simba", 2)
cat2 = Chartreux("Luna", 3)
cat3 = Siamese("Milo", 1)

#  Liste contenant les chats
all_cats = [cat1, cat2, cat3]

#  Instance de Pets avec les chats de Sara
sara_pets = Pets(all_cats)

#  Faire marcher tous les chats
sara_pets.walk()

# Exercice 2

class Dog:
    def __init__(self, name, age, weight):
        self.name = name
        self.age = age
        self.weight = weight

    def bark(self):
        return f"{self.name} is barking"

    def run_speed(self):
        return (self.weight / self.age) * 10  # Formule donnée

    def fight(self, other_dog):
        my_power = self.run_speed() * self.weight
        other_power = other_dog.run_speed() * other_dog.weight
        winner = self.name if my_power > other_power else other_dog.name
        return f"The winner is {winner}!"

# Création des chiens
dog1 = Dog("Rex", 5, 20)
dog2 = Dog("Buddy", 3, 15)
dog3 = Dog("Max", 4, 18)

# Tests
print(dog1.bark())
print(dog2.run_speed())
print(dog1.fight(dog3))

# Exercice 3 

import random
from dog import Dog  # Import de la classe Dog

class PetDog(Dog):
    def __init__(self, name, age, weight):
        super().__init__(name, age, weight)
        self.trained = False

    def train(self):
        print(self.bark())  # Fait aboyer le chien
        self.trained = True  # Change trained à True

    def play(self, *dog_names):
        print(f"{', '.join(dog_names)} all play together.")

    def do_a_trick(self):
        if self.trained:
            tricks = [
                f"{self.name} does a barrel roll",
                f"{self.name} stands on his back legs",
                f"{self.name} shakes your hand",
                f"{self.name} plays dead"
            ]
            print(random.choice(tricks))  # Affiche un tour au hasard

# Création d'un chien domestiqué
pet_dog = PetDog("Charlie", 4, 12)

#  Tests
pet_dog.train()
pet_dog.play("Charlie", "Buddy", "Max")
pet_dog.do_a_trick()


# Exercice 4

class Family:
    def __init__(self, last_name, members):
        self.last_name = last_name
        self.members = members

    def born(self, **kwargs):
        self.members.append(kwargs)
        print(f"Congratulations! {kwargs['name']} has been born!")

    def is_18(self, name):
        for member in self.members:
            if member["name"] == name:
                return member["age"] >= 18
        return False  # Si la personne n'est pas trouvée

    def family_presentation(self):
        print(f"The {self.last_name} family:")
        for member in self.members:
            print(member)

# Création d'une famille
members = [
    {'name': 'Michael', 'age': 35, 'gender': 'Male', 'is_child': False},
    {'name': 'Sarah', 'age': 32, 'gender': 'Female', 'is_child': False}
]
smith_family = Family("Smith", members)

#  Tests
smith_family.family_presentation()
smith_family.born(name="Jack", age=0, gender="Male", is_child=True)
smith_family.family_presentation()


# Exercice 5

class TheIncredibles(Family):
    def use_power(self, name):
        for member in self.members:
            if member["name"] == name:
                if member["age"] >= 18:
                    print(f"{name} can {member['power']}!")
                else:
                    raise Exception(f"{name} is not old enough to use power.")

    def incredible_presentation(self):
        print(f"Here is our powerful family {self.last_name}!")
        super().family_presentation()

#  Création des Indestructibles
incredibles_members = [
    {'name': 'Michael', 'age': 35, 'gender': 'Male', 'is_child': False, 'power': 'fly', 'incredible_name': 'MikeFly'},
    {'name': 'Sarah', 'age': 32, 'gender': 'Female', 'is_child': False, 'power': 'read minds', 'incredible_name': 'SuperWoman'}
]
incredible_family = TheIncredibles("Incredibles", incredibles_members)

#  Tests
incredible_family.incredible_presentation()
incredible_family.born(name="Jack", age=0, gender="Male", is_child=True, power="Unknown Power", incredible_name="BabyJack")
incredible_family.incredible_presentation()
